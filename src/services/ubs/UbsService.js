import axios from 'axios';
import { MVP_API_URL } from '../../config/api';

// Base API URL from central configuration
const API_BASE_URL = MVP_API_URL;
const UBS_API_PATH = '/ubs';

/**
 * Service for UBS-related API calls
 */
class UbsService {
  /**
   * Get user orders
   *
   * @param {number} page - Page number (0-based)
   * @param {number} size - Page size
   * @returns {Promise<Object>} Promise that resolves to user orders
   */
  static async getUserOrders(page = 0, size = 10) {
    try {
      const response = await axios.get(`${API_BASE_URL}${UBS_API_PATH}/order?page=${page}&size=${size}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user orders:', error);
      throw error;
    }
  }

  /**
   * Get order details
   *
   * @param {number} orderId - Order ID
   * @returns {Promise<Object>} Promise that resolves to order details
   */
  static async getOrderDetails(orderId) {
    try {
      const response = await axios.get(`${API_BASE_URL}${UBS_API_PATH}/order/${orderId}`);
      return response.data;
    } catch (error) {
      console.error(`Error getting order details for order ${orderId}:`, error);
      throw error;
    }
  }

  /**
   * Pay for order
   *
   * @param {number} orderId - Order ID
   * @param {number} bonusesToUse - Amount of bonuses to use for payment
   * @returns {Promise<Object>} Promise that resolves when payment is processed
   */
  static async payForOrder(orderId, bonusesToUse = 0) {
    try {
      const response = await axios.post(`${API_BASE_URL}${UBS_API_PATH}/order/${orderId}/pay`, {
        bonusesToUse,
        paymentId: null // Payment ID will be generated by the payment gateway in a real implementation
      });
      return response.data;
    } catch (error) {
      console.error(`Error paying for order ${orderId}:`, error);
      throw error;
    }
  }

  /**
   * Cancel order
   *
   * @param {number} orderId - Order ID
   * @param {string} reason - Cancellation reason
   * @returns {Promise<Object>} Promise that resolves when order is canceled
   */
  static async cancelOrder(orderId, reason) {
    try {
      const response = await axios.patch(`${API_BASE_URL}${UBS_API_PATH}/order/${orderId}/cancel`, { reason });
      return response.data;
    } catch (error) {
      console.error(`Error canceling order ${orderId}:`, error);
      throw error;
    }
  }

  /**
   * Get user bonuses
   *
   * @returns {Promise<Object>} Promise that resolves to user bonuses
   */
  static async getUserBonuses() {
    try {
      const response = await axios.get(`${API_BASE_URL}${UBS_API_PATH}/bonuses`);
      return response.data;
    } catch (error) {
      console.error('Error getting user bonuses:', error);
      throw error;
    }
  }

  /**
   * Get user messages
   *
   * @param {number} page - Page number (0-based)
   * @param {number} size - Page size
   * @returns {Promise<Object>} Promise that resolves to user messages
   */
  static async getUserMessages(page = 0, size = 10) {
    try {
      const response = await axios.get(`${API_BASE_URL}${UBS_API_PATH}/messages?page=${page}&size=${size}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user messages:', error);
      throw error;
    }
  }

  /**
   * Mark message as read
   *
   * @param {number} messageId - Message ID
   * @returns {Promise<Object>} Promise that resolves when message is marked as read
   */
  static async markMessageAsRead(messageId) {
    try {
      const response = await axios.patch(`${API_BASE_URL}${UBS_API_PATH}/messages/${messageId}/read`, {});
      return response.data;
    } catch (error) {
      console.error(`Error marking message ${messageId} as read:`, error);
      throw error;
    }
  }

  /**
   * Delete message
   *
   * @param {number} messageId - Message ID
   * @returns {Promise<Object>} Promise that resolves when message is deleted
   */
  static async deleteMessage(messageId) {
    try {
      const response = await axios.delete(`${API_BASE_URL}${UBS_API_PATH}/messages/${messageId}`);
      return response.data;
    } catch (error) {
      console.error(`Error deleting message ${messageId}:`, error);
      throw error;
    }
  }

  /**
   * Get user profile
   *
   * @returns {Promise<Object>} Promise that resolves to user profile
   */
  static async getUserProfile() {
    try {
      const response = await axios.get(`${API_BASE_URL}${UBS_API_PATH}/client-profile`);
      return response.data;
    } catch (error) {
      console.error('Error getting user profile:', error);
      throw error;
    }
  }

  /**
   * Update user profile
   *
   * @param {Object} profileData - Profile data to update
   * @returns {Promise<Object>} Promise that resolves to updated user profile
   */
  static async updateUserProfile(profileData) {
    try {
      const response = await axios.put(`${API_BASE_URL}${UBS_API_PATH}/client-profile`, profileData);
      return response.data;
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error;
    }
  }
}

export default UbsService;
